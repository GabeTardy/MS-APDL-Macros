!! File that creates the geometry

cellWidth = ARG1
cellHeight = ARG2
length = ARG3
height = ARG4
caseNo = ARG5

! 1, auxetic
! 2, 90deg auxetic
! 3, hexagon
! 4, zig-zag
! 5, re-entrant
! 6, 90deg re-entrant

/prep7

*if,caseNo,eq,1,then
	
	! creates the six keypoints for a single cell
	K,1,0,0,0
	K,2,0.5*cellWidth,cellHeight,0
	K,3,0,2*cellHeight,0
	K,4,2*cellWidth,0,0
	K,5,1.5*cellWidth,cellHeight,0
	K,6,2*cellWidth,2*cellHeight,0
	
	! creates the five lines for a single cell (top horizontal not created)
	L,1,2
	L,2,3
	L,1,4
	L,4,5
	L,5,6
	
	! copies the previous set of lines along the length of the solid
	linegenX = NINT(length/(3*cellWidth))
	LGEN,linegenX,all,,,3*cellWidth
	
	
	! creates the edge line for the offset cells
	*do,i,0,linegenX - 2
		L,5 + 6*i,(5 + 6*i) + 3
	*enddo
	
	! copies the bottom row of lines up the solid
	linegenY = NINT(height/(2*cellHeight))
	LGEN,linegenY,all,,,,2*cellHeight
	
	! creates the left hand edge of lines
	L,1,3
	*do,i,0,linegenY - 2
		L,3+6*linegenX*i,3+6*linegenX*(i+1)
	*enddo
	
	! creates the right hand edge of lines
	lsel,s,loc,x,0
	LGEN,2,all,,,(3*linegenX-1)*cellWidth
	lsel,all
	
	! creates the lines along the bottom edge
	*do,i,0,linegenX-2
		L,4+6*i,4+6*i+3
	*enddo

	! copies the bottom edge to the top
	lsel,s,loc,y,0
	lgen,2,all,,,,linegenY*(2*cellHeight)
	lsel,all
	
	! ! following algroithm glues the lines in sections, then glues the "seams"
	! nsplits = length/(6*cellWidth)
	! *if,nsplits-NINT(nsplits),GE,0,then
		! nsplits = NINT(nsplits)
	! *else
		! nsplits = NINT(nsplits) - 1
	! *endif

	! ! glues sections
	! distance = length/nsplits
	! *if,nsplits,LT,3,then
		! lglue,all
	! *else
		! *do,i,0,nsplits - 1
			! lsel,s,loc,x,distance*i,distance*(i+1)
			! lglue,all
			! lsel,all
		! *enddo

		! ! glues seams
		! *do,i,0,nsplits - 2
			! lsel,s,loc,x,distance*(i+1)-2*cellWidth,distance*(i+1)+2*cellWidth
			! lglue,all
			! lsel,all
		! *enddo
	! *endif
	
	nummrg,kp,,,,low
	
	rhs = (3*linegenX - 1)*cellWidth
	newLen = rhs
	newHt = linegenY*2*cellHeight
	
*elseif,caseNo,EQ,2 

	tiny = 1e-15 ! https://baijiahao.baidu.com/s?id=1696357014149497757
	
	! creates the six keypoints for a single cell
	K,1,0,0,0
	K,2,cellWidth,0.5*cellHeight,0
	K,3,2*cellWidth,0,0
	K,4,0,2*cellHeight,0
	K,5,cellWidth,1.5*cellHeight,0
	K,6,2*cellWidth,2*cellHeight,0
	
	! creates the five lines for a single cell (top horizontal not created)
	L,1,2
	L,2,3
	L,1,4
	L,4,5
	L,5,6
	
	! copies the bottom row of lines up the solid
	linegenY = NINT(height/(3*cellHeight)+tiny)
	LGEN,linegenY,all,,,,3*cellHeight
	
	! creates the connecting line for offset cells
	*do,i,0,linegenY - 2
		L,5+6*i,8+6*i
	*enddo
	
	! copies the previous set of lines along the length of the solid
	linegenX = NINT(length/(2*cellWidth)+tiny)
	LGEN,linegenX,all,,,2*cellWidth
	
	! creates left edge
	*do,i,0,linegenY-2
		L,4+6*i,7+6*i
		
		! creates right edge
		L,6*linegenY*(linegenX-1) + 6*i + 6,6*linegenY*(linegenX-1) + 6*(i+1) + 3
	*enddo
	
	! finishes right edge
	*do,i,0,linegenY
		L,6*linegenY*(linegenX-1) + 6*(i-1) + 3,6*linegenY*(linegenX-1) + 6*(i-1) + 6
	*enddo
	
	! creates bottom edge
	*do,i,0,linegenX-1
		L,1+6*linegenY*i,3+6*linegenY*i
		
		L,6*linegenY*(i+1)-2,6*linegenY*(i+1)
	*enddo
	
	nummrg,kp,,,,low
	
	rhs = (3*linegenY - 1)*cellHeight
	newHt = rhs
	newLen = linegenX*2*cellWidth
	
*elseif,caseNo,EQ,3

	! creates the six keypoints for a single cell
	K,1,0,0,0
	K,2,-0.5*cellWidth,cellHeight,0
	K,3,0,2*cellHeight,0
	K,4,1*cellWidth,0,0
	K,5,1.5*cellWidth,cellHeight,0
	K,6,1*cellWidth,2*cellHeight,0
	
	! creates the five lines for a single cell (top horizontal not created)
	L,1,2
	L,2,3
	L,1,4
	L,4,5
	L,5,6
	
	! copies the previous set of lines along the length of the solid
	linegenX = NINT(length/(3*cellWidth))
	LGEN,linegenX,all,,,3*cellWidth
	
	! creates the edge line for the offset cells
	*do,i,0,linegenX - 2
		L,5 + 6*i,(5 + 6*i) + 3
	*enddo
	
	! copies the bottom row of lines up the solid
	linegenY = NINT(height/(2*cellHeight))
	LGEN,linegenY,all,,,,2*cellHeight
	
	! creates the left hand edge of lines
	K,,KX(2),KY(1),0
	KGEN,2,KP(KX(2),KY(1),0),,,,2*linegenY*cellHeight
	L,KP(KX(2),KY(1),0),2
	*do,i,0,linegenY - 2
		L,2+6*linegenX*i,2+6*linegenX*(i+1)
	*enddo
	L,2+6*linegenX*(linegenY-1),KP(KX(2),2*linegenY*cellHeight,0)
	
	! creates the right hand edge of lines
	lsel,s,loc,x,KX(2)
	LGEN,2,all,,,(3*linegenX-1)*cellWidth
	
	lsel,all
	
	! creates the lines along the bottom edge
	L,1,KP(KX(2),KY(1),0)
	*do,i,0,linegenX-2
		L,4+6*i,4+6*i+3
	*enddo
	L,4+6*(linegenX-2)+6,KP(KX(2),KY(1),0)+2
	
	! copies the bottom edge to the top
	lsel,s,loc,y,0
	lgen,2,all,,,,linegenY*(2*cellHeight)
	
	lsel,all
	
	! ! following algroithm glues the lines in sections, then glues the "seams"
	! nsplits = length/(8*cellWidth)
	! *if,nsplits-NINT(nsplits),GE,0,then
		! nsplits = NINT(nsplits)
	! *else
		! nsplits = NINT(nsplits) - 1
	! *endif
	
	! ! glues sections
	! distance = length/nsplits
	! *if,nsplits,LT,3,then
		! lglue,all
	! *else
		! *do,i,0,nsplits - 1
			! lsel,s,loc,x,distance*(i-0.25),distance*(i+1)
			! lglue,all
			! lsel,all
		! *enddo
		
		! ! glues seams
		! *do,i,0,nsplits - 2
			! lsel,s,loc,x,distance*(i+1)-2*cellWidth,distance*(i+1)+2*cellWidth
			! lglue,all
			! lsel,all
		! *enddo
	! *endif
	nummrg,kp,,,,low
	
*elseif,caseNo,EQ,4

	! creates the six keypoints for a single cell
	K,1,0,0,0
	K,2,0.5*cellWidth,cellHeight,0
	K,3,0,2*cellHeight,0
	K,4,1*cellWidth,0,0
	K,5,1.5*cellWidth,cellHeight,0
	K,6,1*cellWidth,2*cellHeight,0
	
	! creates the five lines for a single cell (top horizontal not created)
	L,1,2
	L,2,3
	L,1,4
	L,4,5
	L,5,6
	
	! copies the previous set of lines along the length of the solid
	linegenX = NINT(length/(2*cellWidth))
	LGEN,linegenX,all,,,2*cellWidth
	
	! creates the edge line for the offset cells
	*do,i,0,linegenX - 2
		L,5 + 6*i,(5 + 6*i) + 3
	*enddo
	
	! copies the bottom row of lines up the solid
	linegenY = NINT(height/(2*cellHeight))
	LGEN,linegenY,all,,,,2*cellHeight
	
	! creates the left hand edge of lines
	L,1,3
	*do,i,0,linegenY - 2
		L,3+6*linegenX*i,3+6*linegenX*(i+1)
	*enddo
	
	! creates the right hand edge of lines
	
	*do,i,1,linegenY - 1
		L,6*linegenX*i - 1,6*linegenX*(i+1) - 1
	*enddo
	
	! bottom right corner keypoint
	K,6*linegenX*linegenY+1,(2*linegenX-0.5)*cellwidth,0,0
	L,6*linegenX*linegenY+1,6*linegenX - 1
	
	! top right corner keypoint
	K,6*linegenX*linegenY+2,(2*linegenX-0.5)*cellwidth,(2*linegenY)*cellheight,0
	L,6*linegenX*linegenY - 1,6*linegenX*linegenY+2
	
	! creates the lines along the bottom edge
	*do,i,0,linegenX-2
		L,4+6*i,4+6*i+3
	*enddo
	bottomright = KP((2*linegenX-0.5)*cellwidth,0,0)
	L,bottomright,4+6*(linegenX-2)+6
	
	! copies the bottom edge to the top
	lsel,s,loc,y,0
	lgen,2,all,,,,linegenY*(2*cellHeight)
	lsel,all
	
	! ! following algroithm glues the lines in sections, then glues the "seams"
	! nsplits = length/(4*cellWidth)
	! *if,nsplits-NINT(nsplits),GE,0,then
		! nsplits = NINT(nsplits)
	! *else
		! nsplits = NINT(nsplits) - 1
	! *endif
	
	! ! glues sections
	! distance = length/nsplits
	! *if,nsplits,LT,3,then
		! lovlap,all
	! *else
		! *do,i,0,nsplits - 2
			! lsel,s,loc,x,distance*i,distance*(i+1)
			! lglue,all
			! lsel,all
		! *enddo
		
		! lsel,s,loc,x,distance*(nsplits-1),distance*nsplits
		! lovlap,all
		! lsel,all
		
		! ! glues seams
		! *do,i,0,nsplits - 2
			! lsel,s,loc,x,distance*(i+1)-2*cellWidth,distance*(i+1)+2*cellWidth
			! lglue,all
			! lsel,all
		! *enddo
	! *endif
	nummrg,kp,,,,low
	
	rhs = (2*linegenX - 0.5)*cellWidth
	newLen = rhs
	newHt = linegenY*2*cellHeight
	
*elseif,caseNo,EQ,5
	
	! creates the six keypoints for a single cell
	K,1,0,0,0
	K,2,-0.5*cellWidth,cellHeight,0
	K,3,0,2*cellHeight,0
	K,4,1*cellWidth,0,0
	K,5,1.5*cellWidth,cellHeight,0
	K,6,1*cellWidth,2*cellHeight,0
	
	! creates the five lines for a single cell (top horizontal not created)
	L,1,2
	L,2,3
	
	L,4,5
	L,5,6
	
	! copies the previous set of lines along the length of the solid
	linegenX = NINT(length/(3*cellWidth))
	LGEN,linegenX,all,,,3*cellWidth

	! copies the bottom row of lines up the solid
	linegenY = NINT(height/(2*cellHeight))
	LGEN,linegenY,all,,,,2*cellHeight
	
	! creates the left hand edge of lines
	K,,KX(2),KY(1),0
	KGEN,2,KP(KX(2),KY(1),0),,,,2*linegenY*cellHeight
	L,KP(KX(2),KY(1),0),2
	*do,i,0,linegenY - 2
		L,2+6*linegenX*i,2+6*linegenX*(i+1)
	*enddo
	L,2+6*linegenX*(linegenY-1),KP(KX(2),2*linegenY*cellHeight,0)
	
	! creates the right hand edge of lines
	lsel,s,loc,x,KX(2)
	LGEN,2,all,,,(3*linegenX-1)*cellWidth
	
	lsel,all
	
	! creates the lines along the bottom edge
	*do,i,0,2*linegenX-2
		L,1+3*i,1+3*(i+1)
	*enddo
	L,KP(KX(2),KY(1),0),1
	L,1+3*(2*linegenX-1),KP((3*linegenX-1.5)*cellWidth,0,0)
	
	! copies the bottom edge to the top
	lsel,s,loc,y,0
	lgen,2,all,,,,linegenY*(2*cellHeight)
	
	lsel,all
	
	! ! following algroithm glues the lines in sections, then glues the "seams"
	! nsplits = length/(15*cellWidth)
	! *if,nsplits-NINT(nsplits),GE,0,then
		! nsplits = NINT(nsplits)
	! *else
		! nsplits = NINT(nsplits) - 1
	! *endif
	
	! *if,nsplits,LT,3,then
		! lglue,all
	! *else
		
		! lsel,s,loc,x,-2*cellWidth,distance
		! lglue,all
		! lsel,all
		
		! ! glues sections
		! distance = length/nsplits
		! *do,i,1,nsplits - 1
			! lsel,s,loc,x,distacne*i,distance*(i+1)
			! lglue,all
			! lsel,all
		! *enddo

		! ! glues seams
		! *do,i,0,nsplits - 2
			! lsel,s,loc,x,distance*(i+1)-3*cellWidth,distance*(i+1)+3*cellWidth
			! lglue,all
			! lsel,all
		! *enddo
	! *endif
	nummrg,kp,,,,low
*else
	! THIS IS A HACK VERSION BUT IT DOES THE JOB FOR NOW
	/uis,msgpop,3 
	createSolid,cellHeight,cellWidth,height,length,3
	*get,numkp,kp,,count
	kpi = 1
	*do,i,1,numkp-1 ! assume that 1 is at 0,0,0
		kpi = KPNEXT(kpi)
		kpix = KX(kpi)
		kpiy = KY(kpi)
		kmodif,kpi,kpiy,kpix
	*enddo
	/uis,msgpop,2
*endif

i = 
distance = 
nsplits = 

ARG6 = linegenX
ARG7 = linegenY

